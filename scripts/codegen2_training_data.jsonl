{"text":"// Task: Create a skeleton loader component\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface SkeletonLoaderProps {\n  lines?: number;\n  width?: string;\n  height?: string;\n}\n<div className=\"space-y-2\">\n  <Skeleton className=\"h-4 w-[250px]\" />\n  <Skeleton className=\"h-4 w-[200px]\" />\n  <Skeleton className=\"h-4 w-[150px]\" />\n</div>"}
{"text":"// Task: Make a loading-spinner component\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n<div className=\"flex items-center justify-center p-4\">\n  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n  <span className=\"sr-only\">Loading...</span>\n</div>"}
{"text":"// Task: Build a pagination-control using shadcn/ui\nimport { Pagination } from '@/components/ui/pagination';\ninterface PaginationControlProps {\n  current_page: number;\n  total_pages: number;\n  onPageChange: (page: number) => void;\n  base_href?: string;\n}\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious \n        href=\"{{previous_href}}\"\n        onClick={{{onPrevious}}}\n        disabled={{{!has_previous}}}\n      />\n    </PaginationItem>\n    {{{pages}}.map(page => (\n      <PaginationItem key={page}>\n        <PaginationLink \n          href=\"{{base_href}}?page={{page}}\"\n          isActive={page === {{current_page}}}\n        >\n          {page}\n        </PaginationLink>\n      </PaginationItem>\n    ))}\n    <PaginationItem>\n      <PaginationNext \n        href=\"{{next_href}}\"\n        onClick={{{onNext}}}\n        disabled={{{!has_next}}}\n      />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>"}
{"text":"// Task: Create a file upload component with progress\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Create a login form with email and password fields\n// Error: No valid components found"}
{"text":"// Task: Build a auth-form using shadcn/ui\nimport { Form } from '@/components/ui/form';\ninterface AuthFormProps {\n  onSubmit: (data: { email: string; password: string }) => void | Promise<void>;\n  loading?: boolean;\n  defaultValues?: { email?: string; password?: string };\n}\n<Form {...form}>\n  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n    <FormField\n      control={form.control}\n      name=\"email\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Email</FormLabel>\n          <FormControl>\n            <Input type=\"email\" placeholder=\"Email\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <FormField\n      control={form.control}\n      name=\"password\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Password</FormLabel>\n          <FormControl>\n            <Input type=\"password\" placeholder=\"Password\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <Button type=\"submit\" className=\"w-full\" disabled={{{loading}}}>{{submit_label}}</Button>\n  </form>\n</Form>"}
{"text":"// Task: Build a alert-message using shadcn/ui\nimport { Alert } from '@/components/ui/alert';\ninterface AlertMessageProps {\n  title: string;\n  description: string;\n  variant?: 'default' | 'destructive';\n}\n<Alert variant=\"{{variant}}\">\n  <AlertTitle>{{title}}</AlertTitle>\n  <AlertDescription>{{description}}</AlertDescription>\n</Alert>"}
{"text":"// Task: Create a radio-group component\nimport { RadioGroup } from '@/components/ui/radio-group';\nimport { useState } from 'react';\ninterface RadioGroupProps {\n  options: Array<{ value: string; label: string }>;\n  value: string;\n  onChange: (value: string) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <RadioGroup value={{{value}}} onValueChange={{{onChange}}}>\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <RadioGroupItem value={option.value} id={option.value} />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </RadioGroup>\n</div>"}
{"text":"// Task: Create a auth-form component\nimport { Form } from '@/components/ui/form';\ninterface AuthFormProps {\n  onSubmit: (data: { email: string; password: string }) => void | Promise<void>;\n  loading?: boolean;\n  defaultValues?: { email?: string; password?: string };\n}\n<Form {...form}>\n  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n    <FormField\n      control={form.control}\n      name=\"email\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Email</FormLabel>\n          <FormControl>\n            <Input type=\"email\" placeholder=\"Email\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <FormField\n      control={form.control}\n      name=\"password\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Password</FormLabel>\n          <FormControl>\n            <Input type=\"password\" placeholder=\"Password\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <Button type=\"submit\" className=\"w-full\" disabled={{{loading}}}>{{submit_label}}</Button>\n  </form>\n</Form>"}
{"text":"// Task: Create a loading spinner component\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n<div className=\"flex items-center justify-center p-4\">\n  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n  <span className=\"sr-only\">Loading...</span>\n</div>"}
{"text":"// Task: Create a badge component\nimport { Badge } from '@/components/ui/badge';\ninterface BadgeProps {\n  content: string;\n  variant?: 'default' | 'secondary' | 'destructive' | 'outline';\n  className?: string;\n}\n<Badge variant=\"{{variant}}\" className=\"{{className}}\">\n  {{content}}\n</Badge>"}
{"text":"// Task: Make a tabs-navigation component\nimport { Tabs } from '@/components/ui/tabs';\ninterface TabsNavigationProps {\n  tabs: Array<{ value: string; label: string; content: React.ReactNode }>;\n  default_tab?: string;\n}\n<Tabs defaultValue=\"{{default_tab}}\" className=\"w-full\">\n  <TabsList>\n    {{{tabs}}.map(tab => (\n      <TabsTrigger key={tab.value} value={tab.value}>\n        {tab.label}\n      </TabsTrigger>\n    ))}\n  </TabsList>\n  {{{tabs}}.map(tab => (\n    <TabsContent key={tab.value} value={tab.value}>\n      {tab.content}\n    </TabsContent>\n  ))}\n</Tabs>"}
{"text":"// Task: Create a dropdown-menu component\nimport { DropdownMenu } from '@/components/ui/dropdown-menu';\ninterface DropdownMenuProps {\n  items: Array<{ value: string; label: string; onClick: () => void; icon?: React.ComponentType }>;\n  trigger_label?: string;\n  label?: string;\n}\n<DropdownMenu>\n  <DropdownMenuTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>{{label}}</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    {{{items}}.map(item => (\n      <DropdownMenuItem key={item.value} onClick={item.onClick}>\n        {item.icon && <item.icon className=\"mr-2 h-4 w-4\" />}\n        {item.label}\n      </DropdownMenuItem>\n    ))}\n  </DropdownMenuContent>\n</DropdownMenu>"}
{"text":"// Task: Make a secondary-button component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface SecondaryButtonProps {\n  onClick: () => void;\n  children: React.ReactNode;\n  size?: 'default' | 'sm' | 'lg';\n}\n<Button\n  type=\"button\"\n  variant=\"outline\"\n  size=\"{{size}}\"\n  onClick={{{handler}}}\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Create a radio group component\nimport { RadioGroup } from '@/components/ui/radio-group';\nimport { useState } from 'react';\ninterface RadioGroupProps {\n  options: Array<{ value: string; label: string }>;\n  value: string;\n  onChange: (value: string) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <RadioGroup value={{{value}}} onValueChange={{{onChange}}}>\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <RadioGroupItem value={option.value} id={option.value} />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </RadioGroup>\n</div>"}
{"text":"// Task: Create a date-picker component\nimport { Calendar } from '@/components/ui/calendar';\nimport { useState } from 'react';\ninterface DatePickerProps {\n  value: Date | undefined;\n  onChange: (date: Date | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Popover>\n    <PopoverTrigger asChild>\n      <Button\n        id=\"{{id}}\"\n        variant=\"outline\"\n        className=\"w-full justify-start text-left font-normal\"\n      >\n        {{{value}} ? format({{value}}, \"PPP\") : \"{{placeholder}}\"}\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent className=\"w-auto p-0\">\n      <Calendar\n        mode=\"single\"\n        selected={{{value}}}\n        onSelect={{{onChange}}}\n        initialFocus\n      />\n    </PopoverContent>\n  </Popover>\n</div>"}
{"text":"// Task: Build a sidebar-menu using shadcn/ui\nimport { Sheet } from '@/components/ui/sheet';\ninterface SidebarMenuProps {\n  items: Array<{ href: string; label: string; icon?: React.ComponentType }>;\n}\n<div className=\"flex h-screen\">\n  <Sheet>\n    <SheetTrigger asChild>\n      <Button variant=\"outline\" size=\"icon\">\n        <Menu className=\"h-4 w-4\" />\n      </Button>\n    </SheetTrigger>\n    <SheetContent side=\"left\" className=\"w-64\">\n      <nav className=\"space-y-2\">\n        {{{items}}.map(item => (\n          <a\n            key={item.href}\n            href={item.href}\n            className=\"flex items-center space-x-2 px-3 py-2 rounded-md hover:bg-accent\"\n          >\n            {item.icon && <item.icon className=\"h-4 w-4\" />}\n            <span>{item.label}</span>\n          </a>\n        ))}\n      </nav>\n    </SheetContent>\n  </Sheet>\n</div>"}
{"text":"// Task: Create a progress-bar component\nimport { Progress } from '@/components/ui/progress';\ninterface ProgressBarProps {\n  value: number;\n  label?: string;\n  show_percentage?: boolean;\n}\n<div className=\"space-y-2\">\n  <div className=\"flex justify-between text-sm\">\n    <span>{{label}}</span>\n    <span>{{{value}}}%</span>\n  </div>\n  <Progress value={{{value}}} className=\"w-full\" />\n</div>"}
{"text":"// Task: Build a popover using shadcn/ui\nimport { Popover } from '@/components/ui/popover';\ninterface PopoverProps {\n  content: React.ReactNode;\n  trigger_label?: string;\n  title?: string;\n  description?: string;\n}\n<Popover>\n  <PopoverTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </PopoverTrigger>\n  <PopoverContent className=\"w-80\">\n    <div className=\"space-y-2\">\n      <h4 className=\"font-medium leading-none\">{{title}}</h4>\n      <p className=\"text-sm text-muted-foreground\">\n        {{description}}\n      </p>\n      {{content}}\n    </div>\n  </PopoverContent>\n</Popover>"}
{"text":"// Task: Make a tooltip component\nimport { Tooltip } from '@/components/ui/tooltip';\ninterface TooltipProps {\n  content: string;\n  trigger_element: React.ReactNode;\n  side?: 'top' | 'right' | 'bottom' | 'left';\n  delay_duration?: number;\n}\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger asChild>\n      {{trigger_element}}\n    </TooltipTrigger>\n    <TooltipContent>\n      <p>{{content}}</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>"}
{"text":"// Task: Build a text-input using shadcn/ui\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TextInputProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url';\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"{{type}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Build a tooltip using shadcn/ui\nimport { Tooltip } from '@/components/ui/tooltip';\ninterface TooltipProps {\n  content: string;\n  trigger_element: React.ReactNode;\n  side?: 'top' | 'right' | 'bottom' | 'left';\n  delay_duration?: number;\n}\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger asChild>\n      {{trigger_element}}\n    </TooltipTrigger>\n    <TooltipContent>\n      <p>{{content}}</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>"}
{"text":"// Task: Create a modal dialog with form submission\nimport { Dialog } from '@/components/ui/dialog';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function ComposedComponent() {\n  return (\n    <div className=\"space-y-4\">\n      <Dialog title={\"\"} content={\"\"} />\n    </div>\n  );\n}"}
{"text":"// Task: Build a toast-notification using shadcn/ui\nimport { Sonner } from '@/components/ui/sonner';\ninterface ToastNotificationProps {\n  title: string;\n  description: string;\n  type?: 'default' | 'success' | 'error' | 'warning' | 'info';\n  action_label?: string;\n  action_handler?: () => void;\n}\n<>\n  <Toaster />\n  <Button onClick={() => toast({{toast_type}}, {\n    title: \"{{title}}\",\n    description: \"{{description}}\",\n    action: {\n      label: \"{{action_label}}\",\n      onClick: {{action_handler}}\n    }\n  })}>\n    Show Toast\n  </Button>\n</>"}
{"text":"// Task: Create a dark mode toggle component\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Make a error-message component\nimport { Alert } from '@/components/ui/alert';\ninterface ErrorMessageProps {\n  message: string;\n  title?: string;\n  dismissible?: boolean;\n}\n<Alert variant=\"destructive\">\n  <AlertCircle className=\"h-4 w-4\" />\n  <AlertTitle>Error</AlertTitle>\n  <AlertDescription>\n    {{message}}\n  </AlertDescription>\n</Alert>"}
{"text":"// Task: Build a breadcrumb-nav using shadcn/ui\nimport { Breadcrumb } from '@/components/ui/breadcrumb';\ninterface BreadcrumbNavProps {\n  items: Array<{ href: string; label: string }>;\n}\n<Breadcrumb>\n  <BreadcrumbList>\n    {{{items}}.map((item, index) => (\n      <BreadcrumbItem key={item.href}>\n        {index === {{items}}.length - 1 ? (\n          <BreadcrumbPage>{item.label}</BreadcrumbPage>\n        ) : (\n          <BreadcrumbLink href={item.href}>{item.label}</BreadcrumbLink>\n        )}\n        {index < {{items}}.length - 1 && <BreadcrumbSeparator />}\n      </BreadcrumbItem>\n    ))}\n  </BreadcrumbList>\n</Breadcrumb>"}
{"text":"// Task: Generate a progress-bar with TypeScript\nimport { Progress } from '@/components/ui/progress';\ninterface ProgressBarProps {\n  value: number;\n  label?: string;\n  show_percentage?: boolean;\n}\n<div className=\"space-y-2\">\n  <div className=\"flex justify-between text-sm\">\n    <span>{{label}}</span>\n    <span>{{{value}}}%</span>\n  </div>\n  <Progress value={{{value}}} className=\"w-full\" />\n</div>"}
{"text":"// Task: Create a avatar component\nimport { Avatar } from '@/components/ui/avatar';\ninterface AvatarProps {\n  fallback: string;\n  src?: string;\n  alt?: string;\n  className?: string;\n}\n<Avatar className=\"{{className}}\">\n  <AvatarImage src=\"{{src}}\" alt=\"{{alt}}\" />\n  <AvatarFallback>{{fallback}}</AvatarFallback>\n</Avatar>"}
{"text":"// Task: Create a popover component\nimport { Popover } from '@/components/ui/popover';\ninterface PopoverProps {\n  content: React.ReactNode;\n  trigger_label?: string;\n  title?: string;\n  description?: string;\n}\n<Popover>\n  <PopoverTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </PopoverTrigger>\n  <PopoverContent className=\"w-80\">\n    <div className=\"space-y-2\">\n      <h4 className=\"font-medium leading-none\">{{title}}</h4>\n      <p className=\"text-sm text-muted-foreground\">\n        {{description}}\n      </p>\n      {{content}}\n    </div>\n  </PopoverContent>\n</Popover>"}
{"text":"// Task: Generate a date-picker with TypeScript\nimport { Calendar } from '@/components/ui/calendar';\nimport { useState } from 'react';\ninterface DatePickerProps {\n  value: Date | undefined;\n  onChange: (date: Date | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Popover>\n    <PopoverTrigger asChild>\n      <Button\n        id=\"{{id}}\"\n        variant=\"outline\"\n        className=\"w-full justify-start text-left font-normal\"\n      >\n        {{{value}} ? format({{value}}, \"PPP\") : \"{{placeholder}}\"}\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent className=\"w-auto p-0\">\n      <Calendar\n        mode=\"single\"\n        selected={{{value}}}\n        onSelect={{{onChange}}}\n        initialFocus\n      />\n    </PopoverContent>\n  </Popover>\n</div>"}
{"text":"// Task: Create a popover component\nimport { Popover } from '@/components/ui/popover';\ninterface PopoverProps {\n  content: React.ReactNode;\n  trigger_label?: string;\n  title?: string;\n  description?: string;\n}\n<Popover>\n  <PopoverTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </PopoverTrigger>\n  <PopoverContent className=\"w-80\">\n    <div className=\"space-y-2\">\n      <h4 className=\"font-medium leading-none\">{{title}}</h4>\n      <p className=\"text-sm text-muted-foreground\">\n        {{description}}\n      </p>\n      {{content}}\n    </div>\n  </PopoverContent>\n</Popover>"}
{"text":"// Task: Build a navigation-menu using shadcn/ui\nimport { NavigationMenu } from '@/components/ui/navigation-menu';\ninterface NavigationMenuProps {\n  items: Array<{ href: string; label: string }>;\n}\n<NavigationMenu>\n  <NavigationMenuList>\n    {{{items}}.map(item => (\n      <NavigationMenuItem key={item.href}>\n        <NavigationMenuLink href={item.href}>\n          {item.label}\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n    ))}\n  </NavigationMenuList>\n</NavigationMenu>"}
{"text":"// Task: Make a pagination-control component\nimport { Pagination } from '@/components/ui/pagination';\ninterface PaginationControlProps {\n  current_page: number;\n  total_pages: number;\n  onPageChange: (page: number) => void;\n  base_href?: string;\n}\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious \n        href=\"{{previous_href}}\"\n        onClick={{{onPrevious}}}\n        disabled={{{!has_previous}}}\n      />\n    </PaginationItem>\n    {{{pages}}.map(page => (\n      <PaginationItem key={page}>\n        <PaginationLink \n          href=\"{{base_href}}?page={{page}}\"\n          isActive={page === {{current_page}}}\n        >\n          {page}\n        </PaginationLink>\n      </PaginationItem>\n    ))}\n    <PaginationItem>\n      <PaginationNext \n        href=\"{{next_href}}\"\n        onClick={{{onNext}}}\n        disabled={{{!has_next}}}\n      />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>"}
{"text":"// Task: Make a time-picker component\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TimePickerProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"time\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a toast notification component\nimport { Sonner } from '@/components/ui/sonner';\ninterface ToastNotificationProps {\n  title: string;\n  description: string;\n  type?: 'default' | 'success' | 'error' | 'warning' | 'info';\n  action_label?: string;\n  action_handler?: () => void;\n}\n<>\n  <Toaster />\n  <Button onClick={() => toast({{toast_type}}, {\n    title: \"{{title}}\",\n    description: \"{{description}}\",\n    action: {\n      label: \"{{action_label}}\",\n      onClick: {{action_handler}}\n    }\n  })}>\n    Show Toast\n  </Button>\n</>"}
{"text":"// Task: Make a alert-message component\nimport { Alert } from '@/components/ui/alert';\ninterface AlertMessageProps {\n  title: string;\n  description: string;\n  variant?: 'default' | 'destructive';\n}\n<Alert variant=\"{{variant}}\">\n  <AlertTitle>{{title}}</AlertTitle>\n  <AlertDescription>{{description}}</AlertDescription>\n</Alert>"}
{"text":"// Task: Make a confirmation-dialog component\nimport { AlertDialog } from '@/components/ui/alert-dialog';\ninterface ConfirmationDialogProps {\n  onConfirm: () => void | Promise<void>;\n  title: string;\n  description: string;\n  trigger_label?: string;\n  confirm_label?: string;\n}\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>{{title}}</AlertDialogTitle>\n      <AlertDialogDescription>\n        {{description}}\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={{{onConfirm}}}>{{confirm_label}}</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>"}
{"text":"// Task: Create a cancel button component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface SecondaryButtonProps {\n  onClick: () => void;\n  children: React.ReactNode;\n  size?: 'default' | 'sm' | 'lg';\n}\n<Button\n  type=\"button\"\n  variant=\"outline\"\n  size=\"{{size}}\"\n  onClick={{{handler}}}\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Make a primary-button component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface PrimaryButtonProps {\n  onClick: () => void | Promise<void>;\n  children: React.ReactNode;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  size?: 'default' | 'sm' | 'lg' | 'icon';\n  disabled?: boolean;\n  loading?: boolean;\n}\n<Button\n  type=\"submit\"\n  variant=\"default\"\n  size=\"{{size}}\"\n  disabled={{{disabled}}}\n  onClick={{{handler}}}\n  aria-label=\"{{aria_label}}\"\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Build a checkbox-group using shadcn/ui\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useState } from 'react';\ninterface CheckboxGroupProps {\n  options: Array<{ value: string; label: string }>;\n  checked_values: string[];\n  onChange: (checkedValues: string[]) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <div className=\"space-y-2\">\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={option.value}\n          checked={{{checked_values}}.includes(option.value)}\n          onCheckedChange={{{onChange}}}\n        />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </div>\n</div>"}
{"text":"// Task: Create a pagination-control component\nimport { Pagination } from '@/components/ui/pagination';\ninterface PaginationControlProps {\n  current_page: number;\n  total_pages: number;\n  onPageChange: (page: number) => void;\n  base_href?: string;\n}\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious \n        href=\"{{previous_href}}\"\n        onClick={{{onPrevious}}}\n        disabled={{{!has_previous}}}\n      />\n    </PaginationItem>\n    {{{pages}}.map(page => (\n      <PaginationItem key={page}>\n        <PaginationLink \n          href=\"{{base_href}}?page={{page}}\"\n          isActive={page === {{current_page}}}\n        >\n          {page}\n        </PaginationLink>\n      </PaginationItem>\n    ))}\n    <PaginationItem>\n      <PaginationNext \n        href=\"{{next_href}}\"\n        onClick={{{onNext}}}\n        disabled={{{!has_next}}}\n      />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>"}
{"text":"// Task: Generate a secondary-button with TypeScript\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface SecondaryButtonProps {\n  onClick: () => void;\n  children: React.ReactNode;\n  size?: 'default' | 'sm' | 'lg';\n}\n<Button\n  type=\"button\"\n  variant=\"outline\"\n  size=\"{{size}}\"\n  onClick={{{handler}}}\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Generate a skeleton-loader with TypeScript\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface SkeletonLoaderProps {\n  lines?: number;\n  width?: string;\n  height?: string;\n}\n<div className=\"space-y-2\">\n  <Skeleton className=\"h-4 w-[250px]\" />\n  <Skeleton className=\"h-4 w-[200px]\" />\n  <Skeleton className=\"h-4 w-[150px]\" />\n</div>"}
{"text":"// Task: Create a data table component\nimport { Table } from '@/components/ui/table';\ninterface DataTableProps {\n  data: Array<Record<string, any>>;\n  columns: string[];\n  onRowClick?: (row: any) => void;\n}\n<Table>\n  <TableHeader>\n    <TableRow>\n      {{{columns}}.map(col => <TableHead key={col}>{col}</TableHead>)}\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    {{{data}}.map((row, i) => (\n      <TableRow key={i}>\n        {Object.values(row).map((cell, j) => <TableCell key={j}>{cell}</TableCell>)}\n      </TableRow>\n    ))}\n  </TableBody>\n</Table>"}
{"text":"// Task: Make a modal-dialog component\nimport { Dialog } from '@/components/ui/dialog';\ninterface ModalDialogProps {\n  title: string;\n  content: React.ReactNode;\n  description?: string;\n  trigger_label?: string;\n  confirm_label?: string;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n}\n<Dialog>\n  <DialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </DialogTrigger>\n  <DialogContent className=\"sm:max-w-[425px]\">\n    <DialogHeader>\n      <DialogTitle>{{title}}</DialogTitle>\n      <DialogDescription>\n        {{description}}\n      </DialogDescription>\n    </DialogHeader>\n    <div className=\"py-4\">\n      {{content}}\n    </div>\n    <DialogFooter>\n      <Button type=\"button\" variant=\"outline\" onClick={{{onCancel}}}>\n        Cancel\n      </Button>\n      <Button type=\"button\" onClick={{{onConfirm}}}>\n        {{confirm_label}}\n      </Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>"}
{"text":"// Task: Build a file-upload using shadcn/ui\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface FileUploadProps {\n  onChange: (files: FileList | null) => void;\n  accept?: string;\n  multiple?: boolean;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <div className=\"flex items-center space-x-2\">\n    <Input\n      id=\"{{id}}\"\n      type=\"file\"\n      onChange={{{onChange}}}\n      accept=\"{{accept}}\"\n      multiple={{{multiple}}}\n      disabled={{{disabled}}}\n    />\n    <Button type=\"button\" variant=\"outline\" onClick={{{onClear}}}>\n      Clear\n    </Button>\n  </div>\n  {{{files}}.length > 0 && (\n    <div className=\"text-sm text-muted-foreground\">\n      {{{files}}.length} file(s) selected\n    </div>\n  )}\n</div>"}
{"text":"// Task: Create a modal-dialog component\nimport { Dialog } from '@/components/ui/dialog';\ninterface ModalDialogProps {\n  title: string;\n  content: React.ReactNode;\n  description?: string;\n  trigger_label?: string;\n  confirm_label?: string;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n}\n<Dialog>\n  <DialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </DialogTrigger>\n  <DialogContent className=\"sm:max-w-[425px]\">\n    <DialogHeader>\n      <DialogTitle>{{title}}</DialogTitle>\n      <DialogDescription>\n        {{description}}\n      </DialogDescription>\n    </DialogHeader>\n    <div className=\"py-4\">\n      {{content}}\n    </div>\n    <DialogFooter>\n      <Button type=\"button\" variant=\"outline\" onClick={{{onCancel}}}>\n        Cancel\n      </Button>\n      <Button type=\"button\" onClick={{{onConfirm}}}>\n        {{confirm_label}}\n      </Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>"}
{"text":"// Task: Make a auth-form component\nimport { Form } from '@/components/ui/form';\ninterface AuthFormProps {\n  onSubmit: (data: { email: string; password: string }) => void | Promise<void>;\n  loading?: boolean;\n  defaultValues?: { email?: string; password?: string };\n}\n<Form {...form}>\n  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n    <FormField\n      control={form.control}\n      name=\"email\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Email</FormLabel>\n          <FormControl>\n            <Input type=\"email\" placeholder=\"Email\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <FormField\n      control={form.control}\n      name=\"password\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Password</FormLabel>\n          <FormControl>\n            <Input type=\"password\" placeholder=\"Password\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <Button type=\"submit\" className=\"w-full\" disabled={{{loading}}}>{{submit_label}}</Button>\n  </form>\n</Form>"}
{"text":"// Task: Generate a avatar with TypeScript\nimport { Avatar } from '@/components/ui/avatar';\ninterface AvatarProps {\n  fallback: string;\n  src?: string;\n  alt?: string;\n  className?: string;\n}\n<Avatar className=\"{{className}}\">\n  <AvatarImage src=\"{{src}}\" alt=\"{{alt}}\" />\n  <AvatarFallback>{{fallback}}</AvatarFallback>\n</Avatar>"}
{"text":"// Task: Make a toast-notification component\nimport { Sonner } from '@/components/ui/sonner';\ninterface ToastNotificationProps {\n  title: string;\n  description: string;\n  type?: 'default' | 'success' | 'error' | 'warning' | 'info';\n  action_label?: string;\n  action_handler?: () => void;\n}\n<>\n  <Toaster />\n  <Button onClick={() => toast({{toast_type}}, {\n    title: \"{{title}}\",\n    description: \"{{description}}\",\n    action: {\n      label: \"{{action_label}}\",\n      onClick: {{action_handler}}\n    }\n  })}>\n    Show Toast\n  </Button>\n</>"}
{"text":"// Task: Create a settings page with form and buttons\n// Error: No valid components found"}
{"text":"// Task: Create a time picker component\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TimePickerProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"time\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a confirmation-dialog component\nimport { AlertDialog } from '@/components/ui/alert-dialog';\ninterface ConfirmationDialogProps {\n  onConfirm: () => void | Promise<void>;\n  title: string;\n  description: string;\n  trigger_label?: string;\n  confirm_label?: string;\n}\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>{{title}}</AlertDialogTitle>\n      <AlertDialogDescription>\n        {{description}}\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={{{onConfirm}}}>{{confirm_label}}</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>"}
{"text":"// Task: Build a data-table using shadcn/ui\nimport { Table } from '@/components/ui/table';\ninterface DataTableProps {\n  data: Array<Record<string, any>>;\n  columns: string[];\n  onRowClick?: (row: any) => void;\n}\n<Table>\n  <TableHeader>\n    <TableRow>\n      {{{columns}}.map(col => <TableHead key={col}>{col}</TableHead>)}\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    {{{data}}.map((row, i) => (\n      <TableRow key={i}>\n        {Object.values(row).map((cell, j) => <TableCell key={j}>{cell}</TableCell>)}\n      </TableRow>\n    ))}\n  </TableBody>\n</Table>"}
{"text":"// Task: Generate a tooltip with TypeScript\nimport { Tooltip } from '@/components/ui/tooltip';\ninterface TooltipProps {\n  content: string;\n  trigger_element: React.ReactNode;\n  side?: 'top' | 'right' | 'bottom' | 'left';\n  delay_duration?: number;\n}\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger asChild>\n      {{trigger_element}}\n    </TooltipTrigger>\n    <TooltipContent>\n      <p>{{content}}</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>"}
{"text":"// Task: Generate a badge with TypeScript\nimport { Badge } from '@/components/ui/badge';\ninterface BadgeProps {\n  content: string;\n  variant?: 'default' | 'secondary' | 'destructive' | 'outline';\n  className?: string;\n}\n<Badge variant=\"{{variant}}\" className=\"{{className}}\">\n  {{content}}\n</Badge>"}
{"text":"// Task: Build a radio-group using shadcn/ui\nimport { RadioGroup } from '@/components/ui/radio-group';\nimport { useState } from 'react';\ninterface RadioGroupProps {\n  options: Array<{ value: string; label: string }>;\n  value: string;\n  onChange: (value: string) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <RadioGroup value={{{value}}} onValueChange={{{onChange}}}>\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <RadioGroupItem value={option.value} id={option.value} />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </RadioGroup>\n</div>"}
{"text":"// Task: Make a skeleton-loader component\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface SkeletonLoaderProps {\n  lines?: number;\n  width?: string;\n  height?: string;\n}\n<div className=\"space-y-2\">\n  <Skeleton className=\"h-4 w-[250px]\" />\n  <Skeleton className=\"h-4 w-[200px]\" />\n  <Skeleton className=\"h-4 w-[150px]\" />\n</div>"}
{"text":"// Task: Build a stat-card using shadcn/ui\nimport { Card } from '@/components/ui/card';\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  description?: string;\n  icon?: React.ReactNode;\n}\n<Card>\n  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n    <CardTitle className=\"text-sm font-medium\">{{title}}</CardTitle>\n    {{icon}}\n  </CardHeader>\n  <CardContent>\n    <div className=\"text-2xl font-bold\">{{value}}</div>\n    <p className=\"text-xs text-muted-foreground\">\n      {{description}}\n    </p>\n  </CardContent>\n</Card>"}
{"text":"// Task: Build a avatar using shadcn/ui\nimport { Avatar } from '@/components/ui/avatar';\ninterface AvatarProps {\n  fallback: string;\n  src?: string;\n  alt?: string;\n  className?: string;\n}\n<Avatar className=\"{{className}}\">\n  <AvatarImage src=\"{{src}}\" alt=\"{{alt}}\" />\n  <AvatarFallback>{{fallback}}</AvatarFallback>\n</Avatar>"}
{"text":"// Task: Make a breadcrumb-nav component\nimport { Breadcrumb } from '@/components/ui/breadcrumb';\ninterface BreadcrumbNavProps {\n  items: Array<{ href: string; label: string }>;\n}\n<Breadcrumb>\n  <BreadcrumbList>\n    {{{items}}.map((item, index) => (\n      <BreadcrumbItem key={item.href}>\n        {index === {{items}}.length - 1 ? (\n          <BreadcrumbPage>{item.label}</BreadcrumbPage>\n        ) : (\n          <BreadcrumbLink href={item.href}>{item.label}</BreadcrumbLink>\n        )}\n        {index < {{items}}.length - 1 && <BreadcrumbSeparator />}\n      </BreadcrumbItem>\n    ))}\n  </BreadcrumbList>\n</Breadcrumb>"}
{"text":"// Task: Make a dropdown-menu component\nimport { DropdownMenu } from '@/components/ui/dropdown-menu';\ninterface DropdownMenuProps {\n  items: Array<{ value: string; label: string; onClick: () => void; icon?: React.ComponentType }>;\n  trigger_label?: string;\n  label?: string;\n}\n<DropdownMenu>\n  <DropdownMenuTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>{{label}}</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    {{{items}}.map(item => (\n      <DropdownMenuItem key={item.value} onClick={item.onClick}>\n        {item.icon && <item.icon className=\"mr-2 h-4 w-4\" />}\n        {item.label}\n      </DropdownMenuItem>\n    ))}\n  </DropdownMenuContent>\n</DropdownMenu>"}
{"text":"// Task: Generate a dropdown-menu with TypeScript\nimport { DropdownMenu } from '@/components/ui/dropdown-menu';\ninterface DropdownMenuProps {\n  items: Array<{ value: string; label: string; onClick: () => void; icon?: React.ComponentType }>;\n  trigger_label?: string;\n  label?: string;\n}\n<DropdownMenu>\n  <DropdownMenuTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>{{label}}</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    {{{items}}.map(item => (\n      <DropdownMenuItem key={item.value} onClick={item.onClick}>\n        {item.icon && <item.icon className=\"mr-2 h-4 w-4\" />}\n        {item.label}\n      </DropdownMenuItem>\n    ))}\n  </DropdownMenuContent>\n</DropdownMenu>"}
{"text":"// Task: Generate a breadcrumb-nav with TypeScript\nimport { Breadcrumb } from '@/components/ui/breadcrumb';\ninterface BreadcrumbNavProps {\n  items: Array<{ href: string; label: string }>;\n}\n<Breadcrumb>\n  <BreadcrumbList>\n    {{{items}}.map((item, index) => (\n      <BreadcrumbItem key={item.href}>\n        {index === {{items}}.length - 1 ? (\n          <BreadcrumbPage>{item.label}</BreadcrumbPage>\n        ) : (\n          <BreadcrumbLink href={item.href}>{item.label}</BreadcrumbLink>\n        )}\n        {index < {{items}}.length - 1 && <BreadcrumbSeparator />}\n      </BreadcrumbItem>\n    ))}\n  </BreadcrumbList>\n</Breadcrumb>"}
{"text":"// Task: Make a navigation-menu component\nimport { NavigationMenu } from '@/components/ui/navigation-menu';\ninterface NavigationMenuProps {\n  items: Array<{ href: string; label: string }>;\n}\n<NavigationMenu>\n  <NavigationMenuList>\n    {{{items}}.map(item => (\n      <NavigationMenuItem key={item.href}>\n        <NavigationMenuLink href={item.href}>\n          {item.label}\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n    ))}\n  </NavigationMenuList>\n</NavigationMenu>"}
{"text":"// Task: Build a time-picker using shadcn/ui\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TimePickerProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"time\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Generate a pagination-control with TypeScript\nimport { Pagination } from '@/components/ui/pagination';\ninterface PaginationControlProps {\n  current_page: number;\n  total_pages: number;\n  onPageChange: (page: number) => void;\n  base_href?: string;\n}\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious \n        href=\"{{previous_href}}\"\n        onClick={{{onPrevious}}}\n        disabled={{{!has_previous}}}\n      />\n    </PaginationItem>\n    {{{pages}}.map(page => (\n      <PaginationItem key={page}>\n        <PaginationLink \n          href=\"{{base_href}}?page={{page}}\"\n          isActive={page === {{current_page}}}\n        >\n          {page}\n        </PaginationLink>\n      </PaginationItem>\n    ))}\n    <PaginationItem>\n      <PaginationNext \n        href=\"{{next_href}}\"\n        onClick={{{onNext}}}\n        disabled={{{!has_next}}}\n      />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>"}
{"text":"// Task: Create a call to action component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface PrimaryButtonProps {\n  onClick: () => void | Promise<void>;\n  children: React.ReactNode;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  size?: 'default' | 'sm' | 'lg' | 'icon';\n  disabled?: boolean;\n  loading?: boolean;\n}\n<Button\n  type=\"submit\"\n  variant=\"default\"\n  size=\"{{size}}\"\n  disabled={{{disabled}}}\n  onClick={{{handler}}}\n  aria-label=\"{{aria_label}}\"\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Create a submit button component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface PrimaryButtonProps {\n  onClick: () => void | Promise<void>;\n  children: React.ReactNode;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  size?: 'default' | 'sm' | 'lg' | 'icon';\n  disabled?: boolean;\n  loading?: boolean;\n}\n<Button\n  type=\"submit\"\n  variant=\"default\"\n  size=\"{{size}}\"\n  disabled={{{disabled}}}\n  onClick={{{handler}}}\n  aria-label=\"{{aria_label}}\"\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Create a login form component\nimport { Form } from '@/components/ui/form';\ninterface AuthFormProps {\n  onSubmit: (data: { email: string; password: string }) => void | Promise<void>;\n  loading?: boolean;\n  defaultValues?: { email?: string; password?: string };\n}\n<Form {...form}>\n  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n    <FormField\n      control={form.control}\n      name=\"email\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Email</FormLabel>\n          <FormControl>\n            <Input type=\"email\" placeholder=\"Email\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <FormField\n      control={form.control}\n      name=\"password\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Password</FormLabel>\n          <FormControl>\n            <Input type=\"password\" placeholder=\"Password\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <Button type=\"submit\" className=\"w-full\" disabled={{{loading}}}>{{submit_label}}</Button>\n  </form>\n</Form>"}
{"text":"// Task: Build a loading-spinner using shadcn/ui\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n<div className=\"flex items-center justify-center p-4\">\n  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n  <span className=\"sr-only\">Loading...</span>\n</div>"}
{"text":"// Task: Generate a textarea-field with TypeScript\nimport { Textarea } from '@/components/ui/textarea';\nimport { useState } from 'react';\ninterface TextareaFieldProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  value?: string;\n  placeholder?: string;\n  rows?: number;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Textarea\n    id=\"{{id}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    rows={{{rows}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Build a modal-dialog using shadcn/ui\nimport { Dialog } from '@/components/ui/dialog';\ninterface ModalDialogProps {\n  title: string;\n  content: React.ReactNode;\n  description?: string;\n  trigger_label?: string;\n  confirm_label?: string;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n}\n<Dialog>\n  <DialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </DialogTrigger>\n  <DialogContent className=\"sm:max-w-[425px]\">\n    <DialogHeader>\n      <DialogTitle>{{title}}</DialogTitle>\n      <DialogDescription>\n        {{description}}\n      </DialogDescription>\n    </DialogHeader>\n    <div className=\"py-4\">\n      {{content}}\n    </div>\n    <DialogFooter>\n      <Button type=\"button\" variant=\"outline\" onClick={{{onCancel}}}>\n        Cancel\n      </Button>\n      <Button type=\"button\" onClick={{{onConfirm}}}>\n        {{confirm_label}}\n      </Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>"}
{"text":"// Task: Create a tooltip component\nimport { Tooltip } from '@/components/ui/tooltip';\ninterface TooltipProps {\n  content: string;\n  trigger_element: React.ReactNode;\n  side?: 'top' | 'right' | 'bottom' | 'left';\n  delay_duration?: number;\n}\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger asChild>\n      {{trigger_element}}\n    </TooltipTrigger>\n    <TooltipContent>\n      <p>{{content}}</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>"}
{"text":"// Task: Create a primary-button component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface PrimaryButtonProps {\n  onClick: () => void | Promise<void>;\n  children: React.ReactNode;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  size?: 'default' | 'sm' | 'lg' | 'icon';\n  disabled?: boolean;\n  loading?: boolean;\n}\n<Button\n  type=\"submit\"\n  variant=\"default\"\n  size=\"{{size}}\"\n  disabled={{{disabled}}}\n  onClick={{{handler}}}\n  aria-label=\"{{aria_label}}\"\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Create a tabs component\nimport { Tabs } from '@/components/ui/tabs';\ninterface TabsNavigationProps {\n  tabs: Array<{ value: string; label: string; content: React.ReactNode }>;\n  default_tab?: string;\n}\n<Tabs defaultValue=\"{{default_tab}}\" className=\"w-full\">\n  <TabsList>\n    {{{tabs}}.map(tab => (\n      <TabsTrigger key={tab.value} value={tab.value}>\n        {tab.label}\n      </TabsTrigger>\n    ))}\n  </TabsList>\n  {{{tabs}}.map(tab => (\n    <TabsContent key={tab.value} value={tab.value}>\n      {tab.content}\n    </TabsContent>\n  ))}\n</Tabs>"}
{"text":"// Task: Make a file-upload component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface FileUploadProps {\n  onChange: (files: FileList | null) => void;\n  accept?: string;\n  multiple?: boolean;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <div className=\"flex items-center space-x-2\">\n    <Input\n      id=\"{{id}}\"\n      type=\"file\"\n      onChange={{{onChange}}}\n      accept=\"{{accept}}\"\n      multiple={{{multiple}}}\n      disabled={{{disabled}}}\n    />\n    <Button type=\"button\" variant=\"outline\" onClick={{{onClear}}}>\n      Clear\n    </Button>\n  </div>\n  {{{files}}.length > 0 && (\n    <div className=\"text-sm text-muted-foreground\">\n      {{{files}}.length} file(s) selected\n    </div>\n  )}\n</div>"}
{"text":"// Task: Make a radio-group component\nimport { RadioGroup } from '@/components/ui/radio-group';\nimport { useState } from 'react';\ninterface RadioGroupProps {\n  options: Array<{ value: string; label: string }>;\n  value: string;\n  onChange: (value: string) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <RadioGroup value={{{value}}} onValueChange={{{onChange}}}>\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <RadioGroupItem value={option.value} id={option.value} />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </RadioGroup>\n</div>"}
{"text":"// Task: Make a popover component\nimport { Popover } from '@/components/ui/popover';\ninterface PopoverProps {\n  content: React.ReactNode;\n  trigger_label?: string;\n  title?: string;\n  description?: string;\n}\n<Popover>\n  <PopoverTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </PopoverTrigger>\n  <PopoverContent className=\"w-80\">\n    <div className=\"space-y-2\">\n      <h4 className=\"font-medium leading-none\">{{title}}</h4>\n      <p className=\"text-sm text-muted-foreground\">\n        {{description}}\n      </p>\n      {{content}}\n    </div>\n  </PopoverContent>\n</Popover>"}
{"text":"// Task: Create a secondary-button component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface SecondaryButtonProps {\n  onClick: () => void;\n  children: React.ReactNode;\n  size?: 'default' | 'sm' | 'lg';\n}\n<Button\n  type=\"button\"\n  variant=\"outline\"\n  size=\"{{size}}\"\n  onClick={{{handler}}}\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Create a file upload component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface FileUploadProps {\n  onChange: (files: FileList | null) => void;\n  accept?: string;\n  multiple?: boolean;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <div className=\"flex items-center space-x-2\">\n    <Input\n      id=\"{{id}}\"\n      type=\"file\"\n      onChange={{{onChange}}}\n      accept=\"{{accept}}\"\n      multiple={{{multiple}}}\n      disabled={{{disabled}}}\n    />\n    <Button type=\"button\" variant=\"outline\" onClick={{{onClear}}}>\n      Clear\n    </Button>\n  </div>\n  {{{files}}.length > 0 && (\n    <div className=\"text-sm text-muted-foreground\">\n      {{{files}}.length} file(s) selected\n    </div>\n  )}\n</div>"}
{"text":"// Task: Create a error-message component\nimport { Alert } from '@/components/ui/alert';\ninterface ErrorMessageProps {\n  message: string;\n  title?: string;\n  dismissible?: boolean;\n}\n<Alert variant=\"destructive\">\n  <AlertCircle className=\"h-4 w-4\" />\n  <AlertTitle>Error</AlertTitle>\n  <AlertDescription>\n    {{message}}\n  </AlertDescription>\n</Alert>"}
{"text":"// Task: Create a alert-message component\nimport { Alert } from '@/components/ui/alert';\ninterface AlertMessageProps {\n  title: string;\n  description: string;\n  variant?: 'default' | 'destructive';\n}\n<Alert variant=\"{{variant}}\">\n  <AlertTitle>{{title}}</AlertTitle>\n  <AlertDescription>{{description}}</AlertDescription>\n</Alert>"}
{"text":"// Task: Create a data-table component\nimport { Table } from '@/components/ui/table';\ninterface DataTableProps {\n  data: Array<Record<string, any>>;\n  columns: string[];\n  onRowClick?: (row: any) => void;\n}\n<Table>\n  <TableHeader>\n    <TableRow>\n      {{{columns}}.map(col => <TableHead key={col}>{col}</TableHead>)}\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    {{{data}}.map((row, i) => (\n      <TableRow key={i}>\n        {Object.values(row).map((cell, j) => <TableCell key={j}>{cell}</TableCell>)}\n      </TableRow>\n    ))}\n  </TableBody>\n</Table>"}
{"text":"// Task: Generate a auth-form with TypeScript\nimport { Form } from '@/components/ui/form';\ninterface AuthFormProps {\n  onSubmit: (data: { email: string; password: string }) => void | Promise<void>;\n  loading?: boolean;\n  defaultValues?: { email?: string; password?: string };\n}\n<Form {...form}>\n  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n    <FormField\n      control={form.control}\n      name=\"email\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Email</FormLabel>\n          <FormControl>\n            <Input type=\"email\" placeholder=\"Email\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <FormField\n      control={form.control}\n      name=\"password\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Password</FormLabel>\n          <FormControl>\n            <Input type=\"password\" placeholder=\"Password\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <Button type=\"submit\" className=\"w-full\" disabled={{{loading}}}>{{submit_label}}</Button>\n  </form>\n</Form>"}
{"text":"// Task: Build a progress-bar using shadcn/ui\nimport { Progress } from '@/components/ui/progress';\ninterface ProgressBarProps {\n  value: number;\n  label?: string;\n  show_percentage?: boolean;\n}\n<div className=\"space-y-2\">\n  <div className=\"flex justify-between text-sm\">\n    <span>{{label}}</span>\n    <span>{{{value}}}%</span>\n  </div>\n  <Progress value={{{value}}} className=\"w-full\" />\n</div>"}
{"text":"// Task: Create a data table with filtering and search\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Create a pagination component\nimport { Pagination } from '@/components/ui/pagination';\ninterface PaginationControlProps {\n  current_page: number;\n  total_pages: number;\n  onPageChange: (page: number) => void;\n  base_href?: string;\n}\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious \n        href=\"{{previous_href}}\"\n        onClick={{{onPrevious}}}\n        disabled={{{!has_previous}}}\n      />\n    </PaginationItem>\n    {{{pages}}.map(page => (\n      <PaginationItem key={page}>\n        <PaginationLink \n          href=\"{{base_href}}?page={{page}}\"\n          isActive={page === {{current_page}}}\n        >\n          {page}\n        </PaginationLink>\n      </PaginationItem>\n    ))}\n    <PaginationItem>\n      <PaginationNext \n        href=\"{{next_href}}\"\n        onClick={{{onNext}}}\n        disabled={{{!has_next}}}\n      />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>"}
{"text":"// Task: Create a tooltip component\nimport { Tooltip } from '@/components/ui/tooltip';\ninterface TooltipProps {\n  content: string;\n  trigger_element: React.ReactNode;\n  side?: 'top' | 'right' | 'bottom' | 'left';\n  delay_duration?: number;\n}\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger asChild>\n      {{trigger_element}}\n    </TooltipTrigger>\n    <TooltipContent>\n      <p>{{content}}</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>"}
{"text":"// Task: Create a loading-spinner component\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n<div className=\"flex items-center justify-center p-4\">\n  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n  <span className=\"sr-only\">Loading...</span>\n</div>"}
{"text":"// Task: Generate a error-message with TypeScript\nimport { Alert } from '@/components/ui/alert';\ninterface ErrorMessageProps {\n  message: string;\n  title?: string;\n  dismissible?: boolean;\n}\n<Alert variant=\"destructive\">\n  <AlertCircle className=\"h-4 w-4\" />\n  <AlertTitle>Error</AlertTitle>\n  <AlertDescription>\n    {{message}}\n  </AlertDescription>\n</Alert>"}
{"text":"// Task: Create a multi-step form wizard\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Make a sidebar-menu component\nimport { Sheet } from '@/components/ui/sheet';\ninterface SidebarMenuProps {\n  items: Array<{ href: string; label: string; icon?: React.ComponentType }>;\n}\n<div className=\"flex h-screen\">\n  <Sheet>\n    <SheetTrigger asChild>\n      <Button variant=\"outline\" size=\"icon\">\n        <Menu className=\"h-4 w-4\" />\n      </Button>\n    </SheetTrigger>\n    <SheetContent side=\"left\" className=\"w-64\">\n      <nav className=\"space-y-2\">\n        {{{items}}.map(item => (\n          <a\n            key={item.href}\n            href={item.href}\n            className=\"flex items-center space-x-2 px-3 py-2 rounded-md hover:bg-accent\"\n          >\n            {item.icon && <item.icon className=\"h-4 w-4\" />}\n            <span>{item.label}</span>\n          </a>\n        ))}\n      </nav>\n    </SheetContent>\n  </Sheet>\n</div>"}
{"text":"// Task: Build a confirmation-dialog using shadcn/ui\nimport { AlertDialog } from '@/components/ui/alert-dialog';\ninterface ConfirmationDialogProps {\n  onConfirm: () => void | Promise<void>;\n  title: string;\n  description: string;\n  trigger_label?: string;\n  confirm_label?: string;\n}\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>{{title}}</AlertDialogTitle>\n      <AlertDialogDescription>\n        {{description}}\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={{{onConfirm}}}>{{confirm_label}}</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>"}
{"text":"// Task: Create a stat-card component\nimport { Card } from '@/components/ui/card';\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  description?: string;\n  icon?: React.ReactNode;\n}\n<Card>\n  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n    <CardTitle className=\"text-sm font-medium\">{{title}}</CardTitle>\n    {{icon}}\n  </CardHeader>\n  <CardContent>\n    <div className=\"text-2xl font-bold\">{{value}}</div>\n    <p className=\"text-xs text-muted-foreground\">\n      {{description}}\n    </p>\n  </CardContent>\n</Card>"}
{"text":"// Task: Make a card-layout component\nimport { Card } from '@/components/ui/card';\ninterface CardLayoutProps {\n  title?: string;\n  description?: string;\n  children?: React.ReactNode;\n}\n<Card>\n  <CardHeader>\n    <CardTitle>{{title}}</CardTitle>\n    <CardDescription>{{description}}</CardDescription>\n  </CardHeader>\n  <CardContent>\n    {{content}}\n  </CardContent>\n  <CardFooter>\n    {{footer}}\n  </CardFooter>\n</Card>"}
{"text":"// Task: Create a navigation menu component\nimport { NavigationMenu } from '@/components/ui/navigation-menu';\ninterface NavigationMenuProps {\n  items: Array<{ href: string; label: string }>;\n}\n<NavigationMenu>\n  <NavigationMenuList>\n    {{{items}}.map(item => (\n      <NavigationMenuItem key={item.href}>\n        <NavigationMenuLink href={item.href}>\n          {item.label}\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n    ))}\n  </NavigationMenuList>\n</NavigationMenu>"}
{"text":"// Task: Make a date-picker component\nimport { Calendar } from '@/components/ui/calendar';\nimport { useState } from 'react';\ninterface DatePickerProps {\n  value: Date | undefined;\n  onChange: (date: Date | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Popover>\n    <PopoverTrigger asChild>\n      <Button\n        id=\"{{id}}\"\n        variant=\"outline\"\n        className=\"w-full justify-start text-left font-normal\"\n      >\n        {{{value}} ? format({{value}}, \"PPP\") : \"{{placeholder}}\"}\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent className=\"w-auto p-0\">\n      <Calendar\n        mode=\"single\"\n        selected={{{value}}}\n        onSelect={{{onChange}}}\n        initialFocus\n      />\n    </PopoverContent>\n  </Popover>\n</div>"}
{"text":"// Task: Make a badge component\nimport { Badge } from '@/components/ui/badge';\ninterface BadgeProps {\n  content: string;\n  variant?: 'default' | 'secondary' | 'destructive' | 'outline';\n  className?: string;\n}\n<Badge variant=\"{{variant}}\" className=\"{{className}}\">\n  {{content}}\n</Badge>"}
{"text":"// Task: Create a date picker component\nimport { Calendar } from '@/components/ui/calendar';\nimport { useState } from 'react';\ninterface DatePickerProps {\n  value: Date | undefined;\n  onChange: (date: Date | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Popover>\n    <PopoverTrigger asChild>\n      <Button\n        id=\"{{id}}\"\n        variant=\"outline\"\n        className=\"w-full justify-start text-left font-normal\"\n      >\n        {{{value}} ? format({{value}}, \"PPP\") : \"{{placeholder}}\"}\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent className=\"w-auto p-0\">\n      <Calendar\n        mode=\"single\"\n        selected={{{value}}}\n        onSelect={{{onChange}}}\n        initialFocus\n      />\n    </PopoverContent>\n  </Popover>\n</div>"}
{"text":"// Task: Generate a confirmation-dialog with TypeScript\nimport { AlertDialog } from '@/components/ui/alert-dialog';\ninterface ConfirmationDialogProps {\n  onConfirm: () => void | Promise<void>;\n  title: string;\n  description: string;\n  trigger_label?: string;\n  confirm_label?: string;\n}\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>{{title}}</AlertDialogTitle>\n      <AlertDialogDescription>\n        {{description}}\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={{{onConfirm}}}>{{confirm_label}}</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>"}
{"text":"// Task: Create a select-dropdown component\nimport { Select } from '@/components/ui/select';\nimport { useState } from 'react';\ninterface SelectDropdownProps {\n  options: Array<{ value: string; label: string }>;\n  onChange: (value: string) => void;\n  value?: string;\n  placeholder?: string;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Select value={{{value}}} onValueChange={{{onChange}}}>\n    <SelectTrigger>\n      <SelectValue placeholder=\"{{placeholder}}\" />\n    </SelectTrigger>\n    <SelectContent>\n      {{{options}}.map(option => (\n        <SelectItem key={option.value} value={option.value}>\n          {option.label}\n        </SelectItem>\n      ))}\n    </SelectContent>\n  </Select>\n</div>"}
{"text":"// Task: Make a stat-card component\nimport { Card } from '@/components/ui/card';\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  description?: string;\n  icon?: React.ReactNode;\n}\n<Card>\n  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n    <CardTitle className=\"text-sm font-medium\">{{title}}</CardTitle>\n    {{icon}}\n  </CardHeader>\n  <CardContent>\n    <div className=\"text-2xl font-bold\">{{value}}</div>\n    <p className=\"text-xs text-muted-foreground\">\n      {{description}}\n    </p>\n  </CardContent>\n</Card>"}
{"text":"// Task: Build a error-message using shadcn/ui\nimport { Alert } from '@/components/ui/alert';\ninterface ErrorMessageProps {\n  message: string;\n  title?: string;\n  dismissible?: boolean;\n}\n<Alert variant=\"destructive\">\n  <AlertCircle className=\"h-4 w-4\" />\n  <AlertTitle>Error</AlertTitle>\n  <AlertDescription>\n    {{message}}\n  </AlertDescription>\n</Alert>"}
{"text":"// Task: Create a navigation-menu component\nimport { NavigationMenu } from '@/components/ui/navigation-menu';\ninterface NavigationMenuProps {\n  items: Array<{ href: string; label: string }>;\n}\n<NavigationMenu>\n  <NavigationMenuList>\n    {{{items}}.map(item => (\n      <NavigationMenuItem key={item.href}>\n        <NavigationMenuLink href={item.href}>\n          {item.label}\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n    ))}\n  </NavigationMenuList>\n</NavigationMenu>"}
{"text":"// Task: Build a select-dropdown using shadcn/ui\nimport { Select } from '@/components/ui/select';\nimport { useState } from 'react';\ninterface SelectDropdownProps {\n  options: Array<{ value: string; label: string }>;\n  onChange: (value: string) => void;\n  value?: string;\n  placeholder?: string;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Select value={{{value}}} onValueChange={{{onChange}}}>\n    <SelectTrigger>\n      <SelectValue placeholder=\"{{placeholder}}\" />\n    </SelectTrigger>\n    <SelectContent>\n      {{{options}}.map(option => (\n        <SelectItem key={option.value} value={option.value}>\n          {option.label}\n        </SelectItem>\n      ))}\n    </SelectContent>\n  </Select>\n</div>"}
{"text":"// Task: Generate a tabs-navigation with TypeScript\nimport { Tabs } from '@/components/ui/tabs';\ninterface TabsNavigationProps {\n  tabs: Array<{ value: string; label: string; content: React.ReactNode }>;\n  default_tab?: string;\n}\n<Tabs defaultValue=\"{{default_tab}}\" className=\"w-full\">\n  <TabsList>\n    {{{tabs}}.map(tab => (\n      <TabsTrigger key={tab.value} value={tab.value}>\n        {tab.label}\n      </TabsTrigger>\n    ))}\n  </TabsList>\n  {{{tabs}}.map(tab => (\n    <TabsContent key={tab.value} value={tab.value}>\n      {tab.content}\n    </TabsContent>\n  ))}\n</Tabs>"}
{"text":"// Task: Create a responsive button that works on mobile and desktop\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Make a checkbox-group component\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useState } from 'react';\ninterface CheckboxGroupProps {\n  options: Array<{ value: string; label: string }>;\n  checked_values: string[];\n  onChange: (checkedValues: string[]) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <div className=\"space-y-2\">\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={option.value}\n          checked={{{checked_values}}.includes(option.value)}\n          onCheckedChange={{{onChange}}}\n        />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </div>\n</div>"}
{"text":"// Task: Generate a time-picker with TypeScript\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TimePickerProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"time\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a text input component\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TextInputProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url';\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"{{type}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a breadcrumb navigation component\nimport { Breadcrumb } from '@/components/ui/breadcrumb';\ninterface BreadcrumbNavProps {\n  items: Array<{ href: string; label: string }>;\n}\n<Breadcrumb>\n  <BreadcrumbList>\n    {{{items}}.map((item, index) => (\n      <BreadcrumbItem key={item.href}>\n        {index === {{items}}.length - 1 ? (\n          <BreadcrumbPage>{item.label}</BreadcrumbPage>\n        ) : (\n          <BreadcrumbLink href={item.href}>{item.label}</BreadcrumbLink>\n        )}\n        {index < {{items}}.length - 1 && <BreadcrumbSeparator />}\n      </BreadcrumbItem>\n    ))}\n  </BreadcrumbList>\n</Breadcrumb>"}
{"text":"// Task: Generate a primary-button with TypeScript\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface PrimaryButtonProps {\n  onClick: () => void | Promise<void>;\n  children: React.ReactNode;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  size?: 'default' | 'sm' | 'lg' | 'icon';\n  disabled?: boolean;\n  loading?: boolean;\n}\n<Button\n  type=\"submit\"\n  variant=\"default\"\n  size=\"{{size}}\"\n  disabled={{{disabled}}}\n  onClick={{{handler}}}\n  aria-label=\"{{aria_label}}\"\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Create a time-picker component\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TimePickerProps {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"time\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Generate a file-upload with TypeScript\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface FileUploadProps {\n  onChange: (files: FileList | null) => void;\n  accept?: string;\n  multiple?: boolean;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <div className=\"flex items-center space-x-2\">\n    <Input\n      id=\"{{id}}\"\n      type=\"file\"\n      onChange={{{onChange}}}\n      accept=\"{{accept}}\"\n      multiple={{{multiple}}}\n      disabled={{{disabled}}}\n    />\n    <Button type=\"button\" variant=\"outline\" onClick={{{onClear}}}>\n      Clear\n    </Button>\n  </div>\n  {{{files}}.length > 0 && (\n    <div className=\"text-sm text-muted-foreground\">\n      {{{files}}.length} file(s) selected\n    </div>\n  )}\n</div>"}
{"text":"// Task: Create a dropdown menu component\nimport { DropdownMenu } from '@/components/ui/dropdown-menu';\ninterface DropdownMenuProps {\n  items: Array<{ value: string; label: string; onClick: () => void; icon?: React.ComponentType }>;\n  trigger_label?: string;\n  label?: string;\n}\n<DropdownMenu>\n  <DropdownMenuTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>{{label}}</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    {{{items}}.map(item => (\n      <DropdownMenuItem key={item.value} onClick={item.onClick}>\n        {item.icon && <item.icon className=\"mr-2 h-4 w-4\" />}\n        {item.label}\n      </DropdownMenuItem>\n    ))}\n  </DropdownMenuContent>\n</DropdownMenu>"}
{"text":"// Task: Build a skeleton-loader using shadcn/ui\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface SkeletonLoaderProps {\n  lines?: number;\n  width?: string;\n  height?: string;\n}\n<div className=\"space-y-2\">\n  <Skeleton className=\"h-4 w-[250px]\" />\n  <Skeleton className=\"h-4 w-[200px]\" />\n  <Skeleton className=\"h-4 w-[150px]\" />\n</div>"}
{"text":"// Task: Create a notification system with toast messages\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Create a alert component\nimport { Alert } from '@/components/ui/alert';\ninterface AlertMessageProps {\n  title: string;\n  description: string;\n  variant?: 'default' | 'destructive';\n}\n<Alert variant=\"{{variant}}\">\n  <AlertTitle>{{title}}</AlertTitle>\n  <AlertDescription>{{description}}</AlertDescription>\n</Alert>"}
{"text":"// Task: Create a sidebar-menu component\nimport { Sheet } from '@/components/ui/sheet';\ninterface SidebarMenuProps {\n  items: Array<{ href: string; label: string; icon?: React.ComponentType }>;\n}\n<div className=\"flex h-screen\">\n  <Sheet>\n    <SheetTrigger asChild>\n      <Button variant=\"outline\" size=\"icon\">\n        <Menu className=\"h-4 w-4\" />\n      </Button>\n    </SheetTrigger>\n    <SheetContent side=\"left\" className=\"w-64\">\n      <nav className=\"space-y-2\">\n        {{{items}}.map(item => (\n          <a\n            key={item.href}\n            href={item.href}\n            className=\"flex items-center space-x-2 px-3 py-2 rounded-md hover:bg-accent\"\n          >\n            {item.icon && <item.icon className=\"h-4 w-4\" />}\n            <span>{item.label}</span>\n          </a>\n        ))}\n      </nav>\n    </SheetContent>\n  </Sheet>\n</div>"}
{"text":"// Task: Build a badge using shadcn/ui\nimport { Badge } from '@/components/ui/badge';\ninterface BadgeProps {\n  content: string;\n  variant?: 'default' | 'secondary' | 'destructive' | 'outline';\n  className?: string;\n}\n<Badge variant=\"{{variant}}\" className=\"{{className}}\">\n  {{content}}\n</Badge>"}
{"text":"// Task: Create a textarea-field component\nimport { Textarea } from '@/components/ui/textarea';\nimport { useState } from 'react';\ninterface TextareaFieldProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  value?: string;\n  placeholder?: string;\n  rows?: number;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Textarea\n    id=\"{{id}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    rows={{{rows}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Make a avatar component\nimport { Avatar } from '@/components/ui/avatar';\ninterface AvatarProps {\n  fallback: string;\n  src?: string;\n  alt?: string;\n  className?: string;\n}\n<Avatar className=\"{{className}}\">\n  <AvatarImage src=\"{{src}}\" alt=\"{{alt}}\" />\n  <AvatarFallback>{{fallback}}</AvatarFallback>\n</Avatar>"}
{"text":"// Task: Generate a stat-card with TypeScript\nimport { Card } from '@/components/ui/card';\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  description?: string;\n  icon?: React.ReactNode;\n}\n<Card>\n  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n    <CardTitle className=\"text-sm font-medium\">{{title}}</CardTitle>\n    {{icon}}\n  </CardHeader>\n  <CardContent>\n    <div className=\"text-2xl font-bold\">{{value}}</div>\n    <p className=\"text-xs text-muted-foreground\">\n      {{description}}\n    </p>\n  </CardContent>\n</Card>"}
{"text":"// Task: Create a skeleton-loader component\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface SkeletonLoaderProps {\n  lines?: number;\n  width?: string;\n  height?: string;\n}\n<div className=\"space-y-2\">\n  <Skeleton className=\"h-4 w-[250px]\" />\n  <Skeleton className=\"h-4 w-[200px]\" />\n  <Skeleton className=\"h-4 w-[150px]\" />\n</div>"}
{"text":"// Task: Create a select dropdown component\nimport { Select } from '@/components/ui/select';\nimport { useState } from 'react';\ninterface SelectDropdownProps {\n  options: Array<{ value: string; label: string }>;\n  onChange: (value: string) => void;\n  value?: string;\n  placeholder?: string;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Select value={{{value}}} onValueChange={{{onChange}}}>\n    <SelectTrigger>\n      <SelectValue placeholder=\"{{placeholder}}\" />\n    </SelectTrigger>\n    <SelectContent>\n      {{{options}}.map(option => (\n        <SelectItem key={option.value} value={option.value}>\n          {option.label}\n        </SelectItem>\n      ))}\n    </SelectContent>\n  </Select>\n</div>"}
{"text":"// Task: Create a progress bar component\nimport { Progress } from '@/components/ui/progress';\ninterface ProgressBarProps {\n  value: number;\n  label?: string;\n  show_percentage?: boolean;\n}\n<div className=\"space-y-2\">\n  <div className=\"flex justify-between text-sm\">\n    <span>{{label}}</span>\n    <span>{{{value}}}%</span>\n  </div>\n  <Progress value={{{value}}} className=\"w-full\" />\n</div>"}
{"text":"// Task: Make a textarea-field component\nimport { Textarea } from '@/components/ui/textarea';\nimport { useState } from 'react';\ninterface TextareaFieldProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  value?: string;\n  placeholder?: string;\n  rows?: number;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Textarea\n    id=\"{{id}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    rows={{{rows}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Make a select-dropdown component\nimport { Select } from '@/components/ui/select';\nimport { useState } from 'react';\ninterface SelectDropdownProps {\n  options: Array<{ value: string; label: string }>;\n  onChange: (value: string) => void;\n  value?: string;\n  placeholder?: string;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Select value={{{value}}} onValueChange={{{onChange}}}>\n    <SelectTrigger>\n      <SelectValue placeholder=\"{{placeholder}}\" />\n    </SelectTrigger>\n    <SelectContent>\n      {{{options}}.map(option => (\n        <SelectItem key={option.value} value={option.value}>\n          {option.label}\n        </SelectItem>\n      ))}\n    </SelectContent>\n  </Select>\n</div>"}
{"text":"// Task: Create a textarea component\nimport { Textarea } from '@/components/ui/textarea';\nimport { useState } from 'react';\ninterface TextareaFieldProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  value?: string;\n  placeholder?: string;\n  rows?: number;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Textarea\n    id=\"{{id}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    rows={{{rows}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a checkbox-group component\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useState } from 'react';\ninterface CheckboxGroupProps {\n  options: Array<{ value: string; label: string }>;\n  checked_values: string[];\n  onChange: (checkedValues: string[]) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <div className=\"space-y-2\">\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={option.value}\n          checked={{{checked_values}}.includes(option.value)}\n          onCheckedChange={{{onChange}}}\n        />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </div>\n</div>"}
{"text":"// Task: Build a dropdown-menu using shadcn/ui\nimport { DropdownMenu } from '@/components/ui/dropdown-menu';\ninterface DropdownMenuProps {\n  items: Array<{ value: string; label: string; onClick: () => void; icon?: React.ComponentType }>;\n  trigger_label?: string;\n  label?: string;\n}\n<DropdownMenu>\n  <DropdownMenuTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>{{label}}</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    {{{items}}.map(item => (\n      <DropdownMenuItem key={item.value} onClick={item.onClick}>\n        {item.icon && <item.icon className=\"mr-2 h-4 w-4\" />}\n        {item.label}\n      </DropdownMenuItem>\n    ))}\n  </DropdownMenuContent>\n</DropdownMenu>"}
{"text":"// Task: Make a text-input component\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TextInputProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url';\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"{{type}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a breadcrumb-nav component\nimport { Breadcrumb } from '@/components/ui/breadcrumb';\ninterface BreadcrumbNavProps {\n  items: Array<{ href: string; label: string }>;\n}\n<Breadcrumb>\n  <BreadcrumbList>\n    {{{items}}.map((item, index) => (\n      <BreadcrumbItem key={item.href}>\n        {index === {{items}}.length - 1 ? (\n          <BreadcrumbPage>{item.label}</BreadcrumbPage>\n        ) : (\n          <BreadcrumbLink href={item.href}>{item.label}</BreadcrumbLink>\n        )}\n        {index < {{items}}.length - 1 && <BreadcrumbSeparator />}\n      </BreadcrumbItem>\n    ))}\n  </BreadcrumbList>\n</Breadcrumb>"}
{"text":"// Task: Build a secondary-button using shadcn/ui\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface SecondaryButtonProps {\n  onClick: () => void;\n  children: React.ReactNode;\n  size?: 'default' | 'sm' | 'lg';\n}\n<Button\n  type=\"button\"\n  variant=\"outline\"\n  size=\"{{size}}\"\n  onClick={{{handler}}}\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Make a data-table component\nimport { Table } from '@/components/ui/table';\ninterface DataTableProps {\n  data: Array<Record<string, any>>;\n  columns: string[];\n  onRowClick?: (row: any) => void;\n}\n<Table>\n  <TableHeader>\n    <TableRow>\n      {{{columns}}.map(col => <TableHead key={col}>{col}</TableHead>)}\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    {{{data}}.map((row, i) => (\n      <TableRow key={i}>\n        {Object.values(row).map((cell, j) => <TableCell key={j}>{cell}</TableCell>)}\n      </TableRow>\n    ))}\n  </TableBody>\n</Table>"}
{"text":"// Task: Create a search component with autocomplete\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Create a toast-notification component\nimport { Sonner } from '@/components/ui/sonner';\ninterface ToastNotificationProps {\n  title: string;\n  description: string;\n  type?: 'default' | 'success' | 'error' | 'warning' | 'info';\n  action_label?: string;\n  action_handler?: () => void;\n}\n<>\n  <Toaster />\n  <Button onClick={() => toast({{toast_type}}, {\n    title: \"{{title}}\",\n    description: \"{{description}}\",\n    action: {\n      label: \"{{action_label}}\",\n      onClick: {{action_handler}}\n    }\n  })}>\n    Show Toast\n  </Button>\n</>"}
{"text":"// Task: Create a avatar component\nimport { Avatar } from '@/components/ui/avatar';\ninterface AvatarProps {\n  fallback: string;\n  src?: string;\n  alt?: string;\n  className?: string;\n}\n<Avatar className=\"{{className}}\">\n  <AvatarImage src=\"{{src}}\" alt=\"{{alt}}\" />\n  <AvatarFallback>{{fallback}}</AvatarFallback>\n</Avatar>"}
{"text":"// Task: Generate a loading-spinner with TypeScript\nimport { Skeleton } from '@/components/ui/skeleton';\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n<div className=\"flex items-center justify-center p-4\">\n  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n  <span className=\"sr-only\">Loading...</span>\n</div>"}
{"text":"// Task: Create a navigation menu with dropdown submenus\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Create a text-input component\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TextInputProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url';\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"{{type}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a error message component\nimport { Alert } from '@/components/ui/alert';\ninterface ErrorMessageProps {\n  message: string;\n  title?: string;\n  dismissible?: boolean;\n}\n<Alert variant=\"destructive\">\n  <AlertCircle className=\"h-4 w-4\" />\n  <AlertTitle>Error</AlertTitle>\n  <AlertDescription>\n    {{message}}\n  </AlertDescription>\n</Alert>"}
{"text":"// Task: Build a textarea-field using shadcn/ui\nimport { Textarea } from '@/components/ui/textarea';\nimport { useState } from 'react';\ninterface TextareaFieldProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  value?: string;\n  placeholder?: string;\n  rows?: number;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Textarea\n    id=\"{{id}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    rows={{{rows}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a form with validation and error handling\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Generate a checkbox-group with TypeScript\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useState } from 'react';\ninterface CheckboxGroupProps {\n  options: Array<{ value: string; label: string }>;\n  checked_values: string[];\n  onChange: (checkedValues: string[]) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <div className=\"space-y-2\">\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={option.value}\n          checked={{{checked_values}}.includes(option.value)}\n          onCheckedChange={{{onChange}}}\n        />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </div>\n</div>"}
{"text":"// Task: Create a registration form component\nimport { Form } from '@/components/ui/form';\ninterface AuthFormProps {\n  onSubmit: (data: { email: string; password: string }) => void | Promise<void>;\n  loading?: boolean;\n  defaultValues?: { email?: string; password?: string };\n}\n<Form {...form}>\n  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n    <FormField\n      control={form.control}\n      name=\"email\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Email</FormLabel>\n          <FormControl>\n            <Input type=\"email\" placeholder=\"Email\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <FormField\n      control={form.control}\n      name=\"password\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Password</FormLabel>\n          <FormControl>\n            <Input type=\"password\" placeholder=\"Password\" {...field} />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n    <Button type=\"submit\" className=\"w-full\" disabled={{{loading}}}>{{submit_label}}</Button>\n  </form>\n</Form>"}
{"text":"// Task: Create a checkbox group component\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useState } from 'react';\ninterface CheckboxGroupProps {\n  options: Array<{ value: string; label: string }>;\n  checked_values: string[];\n  onChange: (checkedValues: string[]) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <div className=\"space-y-2\">\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={option.value}\n          checked={{{checked_values}}.includes(option.value)}\n          onCheckedChange={{{onChange}}}\n        />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </div>\n</div>"}
{"text":"// Task: Create a badge component\nimport { Badge } from '@/components/ui/badge';\ninterface BadgeProps {\n  content: string;\n  variant?: 'default' | 'secondary' | 'destructive' | 'outline';\n  className?: string;\n}\n<Badge variant=\"{{variant}}\" className=\"{{className}}\">\n  {{content}}\n</Badge>"}
{"text":"// Task: Generate a select-dropdown with TypeScript\nimport { Select } from '@/components/ui/select';\nimport { useState } from 'react';\ninterface SelectDropdownProps {\n  options: Array<{ value: string; label: string }>;\n  onChange: (value: string) => void;\n  value?: string;\n  placeholder?: string;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Select value={{{value}}} onValueChange={{{onChange}}}>\n    <SelectTrigger>\n      <SelectValue placeholder=\"{{placeholder}}\" />\n    </SelectTrigger>\n    <SelectContent>\n      {{{options}}.map(option => (\n        <SelectItem key={option.value} value={option.value}>\n          {option.label}\n        </SelectItem>\n      ))}\n    </SelectContent>\n  </Select>\n</div>"}
{"text":"// Task: Build a date-picker using shadcn/ui\nimport { Calendar } from '@/components/ui/calendar';\nimport { useState } from 'react';\ninterface DatePickerProps {\n  value: Date | undefined;\n  onChange: (date: Date | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Popover>\n    <PopoverTrigger asChild>\n      <Button\n        id=\"{{id}}\"\n        variant=\"outline\"\n        className=\"w-full justify-start text-left font-normal\"\n      >\n        {{{value}} ? format({{value}}, \"PPP\") : \"{{placeholder}}\"}\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent className=\"w-auto p-0\">\n      <Calendar\n        mode=\"single\"\n        selected={{{value}}}\n        onSelect={{{onChange}}}\n        initialFocus\n      />\n    </PopoverContent>\n  </Popover>\n</div>"}
{"text":"// Task: Create a file-upload component\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface FileUploadProps {\n  onChange: (files: FileList | null) => void;\n  accept?: string;\n  multiple?: boolean;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <div className=\"flex items-center space-x-2\">\n    <Input\n      id=\"{{id}}\"\n      type=\"file\"\n      onChange={{{onChange}}}\n      accept=\"{{accept}}\"\n      multiple={{{multiple}}}\n      disabled={{{disabled}}}\n    />\n    <Button type=\"button\" variant=\"outline\" onClick={{{onClear}}}>\n      Clear\n    </Button>\n  </div>\n  {{{files}}.length > 0 && (\n    <div className=\"text-sm text-muted-foreground\">\n      {{{files}}.length} file(s) selected\n    </div>\n  )}\n</div>"}
{"text":"// Task: Create a card component\nimport { Card } from '@/components/ui/card';\ninterface CardLayoutProps {\n  title?: string;\n  description?: string;\n  children?: React.ReactNode;\n}\n<Card>\n  <CardHeader>\n    <CardTitle>{{title}}</CardTitle>\n    <CardDescription>{{description}}</CardDescription>\n  </CardHeader>\n  <CardContent>\n    {{content}}\n  </CardContent>\n  <CardFooter>\n    {{footer}}\n  </CardFooter>\n</Card>"}
{"text":"// Task: Make a progress-bar component\nimport { Progress } from '@/components/ui/progress';\ninterface ProgressBarProps {\n  value: number;\n  label?: string;\n  show_percentage?: boolean;\n}\n<div className=\"space-y-2\">\n  <div className=\"flex justify-between text-sm\">\n    <span>{{label}}</span>\n    <span>{{{value}}}%</span>\n  </div>\n  <Progress value={{{value}}} className=\"w-full\" />\n</div>"}
{"text":"// Task: Create a tabs-navigation component\nimport { Tabs } from '@/components/ui/tabs';\ninterface TabsNavigationProps {\n  tabs: Array<{ value: string; label: string; content: React.ReactNode }>;\n  default_tab?: string;\n}\n<Tabs defaultValue=\"{{default_tab}}\" className=\"w-full\">\n  <TabsList>\n    {{{tabs}}.map(tab => (\n      <TabsTrigger key={tab.value} value={tab.value}>\n        {tab.label}\n      </TabsTrigger>\n    ))}\n  </TabsList>\n  {{{tabs}}.map(tab => (\n    <TabsContent key={tab.value} value={tab.value}>\n      {tab.content}\n    </TabsContent>\n  ))}\n</Tabs>"}
{"text":"// Task: Create a data table with sorting and pagination\n// Error: No valid components found"}
{"text":"// Task: Generate a card-layout with TypeScript\nimport { Card } from '@/components/ui/card';\ninterface CardLayoutProps {\n  title?: string;\n  description?: string;\n  children?: React.ReactNode;\n}\n<Card>\n  <CardHeader>\n    <CardTitle>{{title}}</CardTitle>\n    <CardDescription>{{description}}</CardDescription>\n  </CardHeader>\n  <CardContent>\n    {{content}}\n  </CardContent>\n  <CardFooter>\n    {{footer}}\n  </CardFooter>\n</Card>"}
{"text":"// Task: Build a tabs-navigation using shadcn/ui\nimport { Tabs } from '@/components/ui/tabs';\ninterface TabsNavigationProps {\n  tabs: Array<{ value: string; label: string; content: React.ReactNode }>;\n  default_tab?: string;\n}\n<Tabs defaultValue=\"{{default_tab}}\" className=\"w-full\">\n  <TabsList>\n    {{{tabs}}.map(tab => (\n      <TabsTrigger key={tab.value} value={tab.value}>\n        {tab.label}\n      </TabsTrigger>\n    ))}\n  </TabsList>\n  {{{tabs}}.map(tab => (\n    <TabsContent key={tab.value} value={tab.value}>\n      {tab.content}\n    </TabsContent>\n  ))}\n</Tabs>"}
{"text":"// Task: Generate a radio-group with TypeScript\nimport { RadioGroup } from '@/components/ui/radio-group';\nimport { useState } from 'react';\ninterface RadioGroupProps {\n  options: Array<{ value: string; label: string }>;\n  value: string;\n  onChange: (value: string) => void;\n  group_label?: string;\n}\n<div className=\"space-y-3\">\n  <Label className=\"text-sm font-medium\">{{group_label}}</Label>\n  <RadioGroup value={{{value}}} onValueChange={{{onChange}}}>\n    {{{options}}.map(option => (\n      <div key={option.value} className=\"flex items-center space-x-2\">\n        <RadioGroupItem value={option.value} id={option.value} />\n        <Label htmlFor={option.value}>{option.label}</Label>\n      </div>\n    ))}\n  </RadioGroup>\n</div>"}
{"text":"// Task: Generate a modal-dialog with TypeScript\nimport { Dialog } from '@/components/ui/dialog';\ninterface ModalDialogProps {\n  title: string;\n  content: React.ReactNode;\n  description?: string;\n  trigger_label?: string;\n  confirm_label?: string;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n}\n<Dialog>\n  <DialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </DialogTrigger>\n  <DialogContent className=\"sm:max-w-[425px]\">\n    <DialogHeader>\n      <DialogTitle>{{title}}</DialogTitle>\n      <DialogDescription>\n        {{description}}\n      </DialogDescription>\n    </DialogHeader>\n    <div className=\"py-4\">\n      {{content}}\n    </div>\n    <DialogFooter>\n      <Button type=\"button\" variant=\"outline\" onClick={{{onCancel}}}>\n        Cancel\n      </Button>\n      <Button type=\"button\" onClick={{{onConfirm}}}>\n        {{confirm_label}}\n      </Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>"}
{"text":"// Task: Create a dashboard layout with sidebar and main content\n// Error: No valid components found"}
{"text":"// Task: Generate a navigation-menu with TypeScript\nimport { NavigationMenu } from '@/components/ui/navigation-menu';\ninterface NavigationMenuProps {\n  items: Array<{ href: string; label: string }>;\n}\n<NavigationMenu>\n  <NavigationMenuList>\n    {{{items}}.map(item => (\n      <NavigationMenuItem key={item.href}>\n        <NavigationMenuLink href={item.href}>\n          {item.label}\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n    ))}\n  </NavigationMenuList>\n</NavigationMenu>"}
{"text":"// Task: Generate a text-input with TypeScript\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TextInputProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url';\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"{{type}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Generate a data-table with TypeScript\nimport { Table } from '@/components/ui/table';\ninterface DataTableProps {\n  data: Array<Record<string, any>>;\n  columns: string[];\n  onRowClick?: (row: any) => void;\n}\n<Table>\n  <TableHeader>\n    <TableRow>\n      {{{columns}}.map(col => <TableHead key={col}>{col}</TableHead>)}\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    {{{data}}.map((row, i) => (\n      <TableRow key={i}>\n        {Object.values(row).map((cell, j) => <TableCell key={j}>{cell}</TableCell>)}\n      </TableRow>\n    ))}\n  </TableBody>\n</Table>"}
{"text":"// Task: Create a stat card component\nimport { Card } from '@/components/ui/card';\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  description?: string;\n  icon?: React.ReactNode;\n}\n<Card>\n  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n    <CardTitle className=\"text-sm font-medium\">{{title}}</CardTitle>\n    {{icon}}\n  </CardHeader>\n  <CardContent>\n    <div className=\"text-2xl font-bold\">{{value}}</div>\n    <p className=\"text-xs text-muted-foreground\">\n      {{description}}\n    </p>\n  </CardContent>\n</Card>"}
{"text":"// Task: Generate a sidebar-menu with TypeScript\nimport { Sheet } from '@/components/ui/sheet';\ninterface SidebarMenuProps {\n  items: Array<{ href: string; label: string; icon?: React.ComponentType }>;\n}\n<div className=\"flex h-screen\">\n  <Sheet>\n    <SheetTrigger asChild>\n      <Button variant=\"outline\" size=\"icon\">\n        <Menu className=\"h-4 w-4\" />\n      </Button>\n    </SheetTrigger>\n    <SheetContent side=\"left\" className=\"w-64\">\n      <nav className=\"space-y-2\">\n        {{{items}}.map(item => (\n          <a\n            key={item.href}\n            href={item.href}\n            className=\"flex items-center space-x-2 px-3 py-2 rounded-md hover:bg-accent\"\n          >\n            {item.icon && <item.icon className=\"h-4 w-4\" />}\n            <span>{item.label}</span>\n          </a>\n        ))}\n      </nav>\n    </SheetContent>\n  </Sheet>\n</div>"}
{"text":"// Task: Create a sidebar menu component\nimport { Sheet } from '@/components/ui/sheet';\ninterface SidebarMenuProps {\n  items: Array<{ href: string; label: string; icon?: React.ComponentType }>;\n}\n<div className=\"flex h-screen\">\n  <Sheet>\n    <SheetTrigger asChild>\n      <Button variant=\"outline\" size=\"icon\">\n        <Menu className=\"h-4 w-4\" />\n      </Button>\n    </SheetTrigger>\n    <SheetContent side=\"left\" className=\"w-64\">\n      <nav className=\"space-y-2\">\n        {{{items}}.map(item => (\n          <a\n            key={item.href}\n            href={item.href}\n            className=\"flex items-center space-x-2 px-3 py-2 rounded-md hover:bg-accent\"\n          >\n            {item.icon && <item.icon className=\"h-4 w-4\" />}\n            <span>{item.label}</span>\n          </a>\n        ))}\n      </nav>\n    </SheetContent>\n  </Sheet>\n</div>"}
{"text":"// Task: Generate a popover with TypeScript\nimport { Popover } from '@/components/ui/popover';\ninterface PopoverProps {\n  content: React.ReactNode;\n  trigger_label?: string;\n  title?: string;\n  description?: string;\n}\n<Popover>\n  <PopoverTrigger asChild>\n    <Button variant=\"outline\">{{trigger_label}}</Button>\n  </PopoverTrigger>\n  <PopoverContent className=\"w-80\">\n    <div className=\"space-y-2\">\n      <h4 className=\"font-medium leading-none\">{{title}}</h4>\n      <p className=\"text-sm text-muted-foreground\">\n        {{description}}\n      </p>\n      {{content}}\n    </div>\n  </PopoverContent>\n</Popover>"}
{"text":"// Task: Generate a toast-notification with TypeScript\nimport { Sonner } from '@/components/ui/sonner';\ninterface ToastNotificationProps {\n  title: string;\n  description: string;\n  type?: 'default' | 'success' | 'error' | 'warning' | 'info';\n  action_label?: string;\n  action_handler?: () => void;\n}\n<>\n  <Toaster />\n  <Button onClick={() => toast({{toast_type}}, {\n    title: \"{{title}}\",\n    description: \"{{description}}\",\n    action: {\n      label: \"{{action_label}}\",\n      onClick: {{action_handler}}\n    }\n  })}>\n    Show Toast\n  </Button>\n</>"}
{"text":"// Task: Build a primary-button using shadcn/ui\nimport { Button } from '@/components/ui/button';\nimport { useState } from 'react';\ninterface PrimaryButtonProps {\n  onClick: () => void | Promise<void>;\n  children: React.ReactNode;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  size?: 'default' | 'sm' | 'lg' | 'icon';\n  disabled?: boolean;\n  loading?: boolean;\n}\n<Button\n  type=\"submit\"\n  variant=\"default\"\n  size=\"{{size}}\"\n  disabled={{{disabled}}}\n  onClick={{{handler}}}\n  aria-label=\"{{aria_label}}\"\n>\n  {{label}}\n</Button>"}
{"text":"// Task: Create a error message component\nimport { Alert } from '@/components/ui/alert';\ninterface AlertMessageProps {\n  title: string;\n  description: string;\n  variant?: 'default' | 'destructive';\n}\n<Alert variant=\"{{variant}}\">\n  <AlertTitle>{{title}}</AlertTitle>\n  <AlertDescription>{{description}}</AlertDescription>\n</Alert>"}
{"text":"// Task: Create a confirmation dialog component\nimport { AlertDialog } from '@/components/ui/alert-dialog';\ninterface ConfirmationDialogProps {\n  onConfirm: () => void | Promise<void>;\n  title: string;\n  description: string;\n  trigger_label?: string;\n  confirm_label?: string;\n}\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>{{title}}</AlertDialogTitle>\n      <AlertDialogDescription>\n        {{description}}\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={{{onConfirm}}}>{{confirm_label}}</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>"}
{"text":"// Task: Create a modal dialog component\nimport { Dialog } from '@/components/ui/dialog';\ninterface ModalDialogProps {\n  title: string;\n  content: React.ReactNode;\n  description?: string;\n  trigger_label?: string;\n  confirm_label?: string;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n}\n<Dialog>\n  <DialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </DialogTrigger>\n  <DialogContent className=\"sm:max-w-[425px]\">\n    <DialogHeader>\n      <DialogTitle>{{title}}</DialogTitle>\n      <DialogDescription>\n        {{description}}\n      </DialogDescription>\n    </DialogHeader>\n    <div className=\"py-4\">\n      {{content}}\n    </div>\n    <DialogFooter>\n      <Button type=\"button\" variant=\"outline\" onClick={{{onCancel}}}>\n        Cancel\n      </Button>\n      <Button type=\"button\" onClick={{{onConfirm}}}>\n        {{confirm_label}}\n      </Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>"}
{"text":"// Task: Create a delete confirmation component\nimport { AlertDialog } from '@/components/ui/alert-dialog';\ninterface ConfirmationDialogProps {\n  onConfirm: () => void | Promise<void>;\n  title: string;\n  description: string;\n  trigger_label?: string;\n  confirm_label?: string;\n}\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"{{trigger_variant}}\">{{trigger_label}}</Button>\n  </AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>{{title}}</AlertDialogTitle>\n      <AlertDialogDescription>\n        {{description}}\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction onClick={{{onConfirm}}}>{{confirm_label}}</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>"}
{"text":"// Task: Create a card-layout component\nimport { Card } from '@/components/ui/card';\ninterface CardLayoutProps {\n  title?: string;\n  description?: string;\n  children?: React.ReactNode;\n}\n<Card>\n  <CardHeader>\n    <CardTitle>{{title}}</CardTitle>\n    <CardDescription>{{description}}</CardDescription>\n  </CardHeader>\n  <CardContent>\n    {{content}}\n  </CardContent>\n  <CardFooter>\n    {{footer}}\n  </CardFooter>\n</Card>"}
{"text":"// Task: Create a email input component\nimport { Input } from '@/components/ui/input';\nimport { useState } from 'react';\ninterface TextInputProps {\n  id: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url';\n  placeholder?: string;\n  disabled?: boolean;\n}\n<div className=\"space-y-2\">\n  <Label htmlFor=\"{{id}}\">{{label}}</Label>\n  <Input\n    id=\"{{id}}\"\n    type=\"{{type}}\"\n    placeholder=\"{{placeholder}}\"\n    value={{{value}}}\n    onChange={{{onChange}}}\n    disabled={{{disabled}}}\n  />\n</div>"}
{"text":"// Task: Create a loading state with skeleton components\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function EdgeCaseComponent() {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsLoading(true);\n    try {\n      // Handle submission logic\n      console.log('Submitted:', value);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>EdgeCaseComponent</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          placeholder=\"Enter value...\"\n        />\n        <Button \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}"}
{"text":"// Task: Generate a alert-message with TypeScript\nimport { Alert } from '@/components/ui/alert';\ninterface AlertMessageProps {\n  title: string;\n  description: string;\n  variant?: 'default' | 'destructive';\n}\n<Alert variant=\"{{variant}}\">\n  <AlertTitle>{{title}}</AlertTitle>\n  <AlertDescription>{{description}}</AlertDescription>\n</Alert>"}
{"text":"// Task: Build a card-layout using shadcn/ui\nimport { Card } from '@/components/ui/card';\ninterface CardLayoutProps {\n  title?: string;\n  description?: string;\n  children?: React.ReactNode;\n}\n<Card>\n  <CardHeader>\n    <CardTitle>{{title}}</CardTitle>\n    <CardDescription>{{description}}</CardDescription>\n  </CardHeader>\n  <CardContent>\n    {{content}}\n  </CardContent>\n  <CardFooter>\n    {{footer}}\n  </CardFooter>\n</Card>"}